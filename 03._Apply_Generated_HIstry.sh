#!/bin/bash

# Script B: Commit History Applicator
# This script reads a specially formatted text file (generated by an AI)
# and uses it to construct a new Git repository with a detailed commit history.

HISTORY_FILE="commit_history.txt"

# --- Pre-flight Checks ---

# 1. Check if the history file exists.
if [ ! -f "$HISTORY_FILE" ]; then
    echo "Error: The required history file '$HISTORY_FILE' was not found." >&2
    echo "Please generate this file using an AI and the provided guide." >&2
    exit 1
fi

# 2. Check if a .git directory already exists.
if [ -d ".git" ]; then
    echo "Error: A .git repository already exists here." >&2
    echo "This script must be run in a clean directory containing only your project files." >&2
    exit 1
fi

echo "--- Git History Applicator ---"
read -p "This will initialize a new repository and create history from '$HISTORY_FILE'. Continue? (y/N) " confirm
if [[ ! "$confirm" =~ ^[yY](es)?$ ]]; then
    echo "Operation cancelled."
    exit 1
fi

# --- Initialization ---
echo "Initializing new Git repository..."
git init
git branch -m main

# --- History Application ---
echo "Applying commit history from '$HISTORY_FILE'..."

# Use awk to process the history file. It's powerful for this kind of structured text.
# The script treats "COMMIT:" as a record separator.
awk '
BEGIN { RS = "COMMIT:" ; FS = "\n" ; OFS = "\n" }
# Skip any empty blocks that might result from the file format
NR > 1 {
    # The first line ($1) is the commit message. Trim leading/trailing whitespace.
    gsub(/^[ \t]+|[ \t]+$/, "", $1)
    commit_message = $1

    # Prepare the git commands
    print "echo \"\nCommitting: " commit_message "\""
    
    # Loop through the rest of the lines in the block, which are file paths
    for (i = 2; i <= NF; i++) {
        # Skip any empty lines
        if ($i != "") {
            # Trim whitespace from file paths
            gsub(/^[ \t]+|[ \t]+$/, "", $i)
            # Print the git add command for this file
            print "git add -- \"" $i "\""
        }
    }
    
    # Print the git commit command
    print "git commit -m \"" commit_message "\""
}
' "$HISTORY_FILE" | bash # Pipe the generated commands directly into bash to be executed

echo ""
echo "âœ… Synthetic history created successfully!"
echo ""
echo "--- NEXT STEPS ---"
echo "1. Review your new history with 'git log' or 'git log --oneline --graph'."
echo "2. (Optional) Run 'rewrite_dates_natural.sh' to make the timeline look realistic."
echo "3. Push to your remote repository."
